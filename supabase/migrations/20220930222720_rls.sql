-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

ALTER TABLE IF EXISTS public.unions
    ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Enable read access for all users"
    ON public.unions
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);

ALTER TABLE IF EXISTS public.calendars
    ENABLE ROW LEVEL SECURITY;

REVOKE ALL ON TABLE public.calendars FROM anon;
REVOKE ALL ON TABLE public.calendars FROM authenticated;
REVOKE ALL ON TABLE public.calendars FROM postgres;
REVOKE ALL ON TABLE public.calendars FROM service_role;
REVOKE ALL ON TABLE public.calendars FROM supabase_admin;
GRANT ALL ON TABLE public.calendars TO supabase_admin;

GRANT ALL ON TABLE public.calendars TO authenticated;

GRANT ALL ON TABLE public.calendars TO anon;

GRANT ALL ON TABLE public.calendars TO postgres;

GRANT ALL ON TABLE public.calendars TO service_role;

CREATE POLICY "Enable read access for all users"
    ON public.calendars
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);

ALTER TABLE IF EXISTS public.issues
    ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Enable read access for all users"
    ON public.issues
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);

ALTER TABLE IF EXISTS public.courses
    ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Enable read access for all users"
    ON public.courses
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);

ALTER TABLE IF EXISTS public.unionpage
    ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Enable read access for all users"
    ON public.unionpage
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);

ALTER TABLE IF EXISTS public.personalcalendar
    ENABLE ROW LEVEL SECURITY;

ALTER TABLE IF EXISTS public.personalcalendar DROP COLUMN IF EXISTS userid;

ALTER TABLE IF EXISTS public.personalcalendar
    ADD COLUMN user_id uuid NOT NULL;
ALTER TABLE IF EXISTS public.personalcalendar
    ADD CONSTRAINT personalcalendar_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

CREATE POLICY "Enable delete for users based on userid"
    ON public.personalcalendar
    AS PERMISSIVE
    FOR ALL
    TO public
    USING ((auth.uid() = user_id));

ALTER TABLE IF EXISTS public.unionevents
    ENABLE ROW LEVEL SECURITY;

REVOKE ALL ON TABLE public.unionevents FROM anon;
REVOKE ALL ON TABLE public.unionevents FROM authenticated;
REVOKE ALL ON TABLE public.unionevents FROM postgres;
REVOKE ALL ON TABLE public.unionevents FROM service_role;
REVOKE ALL ON TABLE public.unionevents FROM supabase_admin;
GRANT ALL ON TABLE public.unionevents TO supabase_admin;

GRANT ALL ON TABLE public.unionevents TO authenticated;

GRANT ALL ON TABLE public.unionevents TO anon;

GRANT ALL ON TABLE public.unionevents TO postgres;

GRANT ALL ON TABLE public.unionevents TO service_role;

CREATE POLICY "Enable read access for all users"
    ON public.unionevents
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);

ALTER TABLE IF EXISTS public.rooms
    ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Enable read access for all users"
    ON public.rooms
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);

ALTER TABLE IF EXISTS public.events
    ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Enable read access for all users"
    ON public.events
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);
